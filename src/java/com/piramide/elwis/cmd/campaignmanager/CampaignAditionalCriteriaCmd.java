package com.piramide.elwis.cmd.campaignmanager;

import com.piramide.elwis.cmd.common.strutsejb.BeanTransactionEJBCommand;
import com.piramide.elwis.domain.campaignmanager.*;
import com.piramide.elwis.domain.contactmanager.Customer;
import com.piramide.elwis.domain.contactmanager.CustomerHome;
import com.piramide.elwis.dto.campaignmanager.CampaignContactDTO;
import com.piramide.elwis.utils.CampaignConstants;
import com.piramide.elwis.utils.CampaignCriterionExecute;
import com.piramide.elwis.utils.Constants;
import com.piramide.elwis.utils.ContactConstants;
import net.java.dev.strutsejb.dto.EJBFactory;
import net.java.dev.strutsejb.dto.ResultDTO;
import org.alfacentauro.fantabulous.controller.SearchParameter;
import org.alfacentauro.fantabulous.structure.ListStructure;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.ejb.CreateException;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;
import javax.ejb.SessionContext;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

/**
 * Action class which is responsible for using the query generator for campaigns.
 *
 * @author Yumi
 * @version $Id: CampaignAditionalCriteriaCmd.java 10491 2014-09-17 21:56:37Z miguel $
 */

public class CampaignAditionalCriteriaCmd extends BeanTransactionEJBCommand {

    private final static Log log = LogFactory.getLog(CampaignAditionalCriteriaCmd.class);

    public void executeInStateless(SessionContext ctx) {
        log.debug("CampaignAditionalCriteriaCmd ... execute ... ");

        CampaignHome campaignHome = (CampaignHome) EJBFactory.i.getEJBLocalHome(CampaignConstants.JNDI_CAMPAIGN);
        CampaignContactHome campContactHome = (CampaignContactHome) EJBFactory.i.getEJBLocalHome(CampaignConstants.JNDI_CAMPAIGNCONTACT);
        CustomerHome customerHome = (CustomerHome) EJBFactory.i.getEJBLocalHome(ContactConstants.JNDI_CUSTOMER);
        Campaign campaign = null;
        Customer customer = null;
        CampaignContact campaignContact = null;
        boolean isDouble = true;
        boolean includePartner = true;
        boolean contactPersonDuplicate = false;
        boolean deleteAll = ((Boolean) paramDTO.get("deleteAll")).booleanValue();


        boolean isUpdateHitsOnly = false;
        if (paramDTO.get("isUpdateHitsOnly") != null) {
            isUpdateHitsOnly = (Boolean) paramDTO.get("isUpdateHitsOnly");
        }

        try {
            campaign = campaignHome.findByPrimaryKey(new Integer(paramDTO.get("campaignId").toString()));
            campaign.setIncludePartner((Boolean) paramDTO.get("includePartner"));
            campaign.setIsDouble((Boolean) paramDTO.get("isDouble"));
            campaign.setContactType((Integer) paramDTO.get("contactType"));
            campaign.setAddressType((Integer) paramDTO.get("addressType"));
            campaign.setHasEmail((Integer) paramDTO.get("hasEmail"));
            campaign.setHasEmailTelecomType((Integer) paramDTO.get("hasEmailTelecomType"));
        } catch (FinderException e) {
        }

        if (campaign == null) {
            resultDTO.addResultMessage("error.CampaignSession.NotFound");
            resultDTO.setForward("root");
            return;
        }

/* delete previus recipients (only the generated by criterias no by campaign activities)*/
        if (deleteAll && !isUpdateHitsOnly) {
            log.debug(" ...   delete previus campaignContact   ... ");
            String sql = "delete from campcontact where campaignid =" + campaign.getCampaignId() + " and activityid is null";

            try {
                InitialContext initialContext = new InitialContext();
                DataSource dataSource = (DataSource) initialContext.lookup(Constants.JNDI_ELWISDS);
                Connection connection = dataSource.getConnection();
                connection.prepareStatement(sql).execute();
                connection.close();
            } catch (NamingException e) {
                log.error("error delete ... " + e);
                ctx.setRollbackOnly();
            } catch (SQLException e) {
                log.error("error delete1 ..." + e);
                ctx.setRollbackOnly();
            }
        }

        Collection collection = campaign.getCampaignCriterion();
        ArrayList campCriterions = new ArrayList();
        Collection beforeRecipient = campaign.getCampaignContact();
        Object addressId = null;
        Object contactPersonId = null;

// if not contain criterias then not query processs
        if (collection.size() > 0) {
            log.debug("... execute criterias ....");
//here execute all criterias already in the recipient list + aditional criterias.
            CampaignCriterionExecute execute = new CampaignCriterionExecute();
            ListStructure listStructure = (ListStructure) paramDTO.get("greatQuery");
            ArrayList criterions = new ArrayList(campaign.getCampaignCriterion());
            ArrayList parameterList = new ArrayList();
            campCriterions = criterions;

            parameterList.add(new SearchParameter("companyId", new String(paramDTO.get("companyId").toString())));
            parameterList.add(new SearchParameter("userId", new String(paramDTO.get("userId").toString())));
/*if it is equal 2 then search by both : organizations and persons*/
            if (!campaign.getAddressType().equals(new Integer(2))) // if show only company, contacts
            {
                parameterList.add(new SearchParameter("addressType", campaign.getAddressType().toString()));
            }
/* execute all criterias */
            if (campCriterions.size() > 0) {
                List recipients = null;
                try {
                    recipients = execute.executeCriterias(listStructure, campCriterions, parameterList, !(Boolean) paramDTO.get("isDouble"),
                            (ListStructure) paramDTO.get("productCategoriesGreatQuery"),
                            (ListStructure) paramDTO.get("customerCategoriesGreatQuery"),
                            (ListStructure) paramDTO.get("addressCategoriesGreatQuery"),
                            (ListStructure) paramDTO.get("contactPersonCategoriesGreatQuery"),
                            (ListStructure) paramDTO.get("salePositionCategoriesGreatQuery"));

                    //post process the recipient lis, here process some select criteria
                    recipients = postProcessRecipientList(recipients, campaign.getHasEmail(), campaign.getHasEmailTelecomType(), ctx);

                    resultDTO.put("sizeResultQuery", recipients.size());
                    campaign.setTotalHits(recipients.size());
                    if (isUpdateHitsOnly) {
                        updateCampaignCriterionHits(campCriterions, listStructure);
                    }

                } catch (FinderException e) {
                    log.debug(" ... can't sql generate  ... ");
                }
                log.debug("  result criterias size ..." + recipients.size());

                if (!deleteAll && !isUpdateHitsOnly) { // if already exist then not create.
                    log.debug("  ...  check and compare campaignContact duplicate   ...  ");

                    for (Iterator i = recipients.iterator(); i.hasNext(); ) { //	query result
                        Map map = (Map) i.next();
                        addressId = map.get("addressId");
                        contactPersonId = map.get("contactPersonId");
                        boolean exist = false;

                        for (Iterator iterator = beforeRecipient.iterator(); iterator.hasNext(); ) {//check previous recipients
                            CampaignContact contact = (CampaignContact) iterator.next();
                            if (contactPersonId == null || "".equals(contactPersonId)) {
                                if (contact.getAddressId().toString().equals(addressId) && (contact.getContactPersonId() == null)) {
                                    exist = true;
                                }
                            } else if (contact.getContactPersonId() == null) {
                                if (contact.getAddressId().toString().equals(addressId) && (contactPersonId == null || "".equals(contactPersonId))) {
                                    exist = true;
                                }
                            } else if (contact.getAddressId().toString().equals(addressId) && contact.getContactPersonId().toString().equals(contactPersonId)) {
                                exist = true;
                            }
                            if (exist && !campaign.getIsDouble()) {
                                Collection campContacts = null;
                                try {
                                    if (contact.getContactPersonId() != null && !CampaignConstants.EMPTY.equals(contact.getContactPersonId())) {
                                        campContacts = campContactHome.findByCampaignIdContactPersonId(campaign.getCompanyId(),
                                                campaign.getCampaignId(), contact.getAddressId(), contact.getContactPersonId());
                                    } else {
                                        campContacts = campContactHome.findByCampaignIdContactPersonNULL(campaign.getCompanyId(),
                                                campaign.getCampaignId(), contact.getAddressId());
                                    }
                                } catch (FinderException e) {
                                    log.debug(" .... campContacts not found ...");
                                }

                                for (Iterator iterator1 = campContacts.iterator(); iterator1.hasNext(); ) {
                                    CampaignContact campaignContact1 = (CampaignContact) iterator1.next();
                                    try {
                                        campaignContact1.remove();
                                    } catch (RemoveException e) {
                                        log.debug(" ... can't to remove ... ");
                                    }
                                }
                                break;
                            }
                        }
                    }
                }

/*
create campaign contact with criteria result.
before check if the contact person is duplicate for to delete or no.
*/
                if (!isUpdateHitsOnly) {
                    for (Iterator iterator = recipients.iterator(); iterator.hasNext(); ) {
                        isDouble = false;
                        includePartner = true;
                        contactPersonDuplicate = false;
                        Map map = (Map) iterator.next();
                        Collection campContacts = null;

                        addressId = map.get("addressId");
                        contactPersonId = map.get("contactPersonId");
//for filter the option withPartner - check if address is customer, after if have you partner for not include
                        if (campaign.getIncludePartner().booleanValue()) {
                            try {
                                customer = customerHome.findByPrimaryKey(new Integer(addressId.toString()));
                                if (customer != null) {
                                    if (customer.getPartnerId() != null) {
                                        includePartner = true;
                                    } else {
                                        includePartner = false;
                                    }
                                }
                            } catch (FinderException e) {
                                log.debug("customer not found ... !!!");
                            }
                        }

                        if (addressId != null && contactPersonId != null && !CampaignConstants.EMPTY.equals(contactPersonId)) {//search by contactId, contactPersonId, campaignId
                            Collection repeatContacts = null;
                            try {
                                repeatContacts = campContactHome.findByCampaignIdContactPersonId((Integer) paramDTO.get("companyId"),
                                        new Integer(paramDTO.get("campaignId").toString()),
                                        new Integer(addressId.toString()),
                                        new Integer(contactPersonId.toString()));
                            } catch (FinderException e) {
                                e.printStackTrace();
                            }
                            if (repeatContacts.size() > 0) {
                                isDouble = true;
                            }

                        } else if (addressId != null && contactPersonId == null) {//seach by campaignId, contactId and contactPersonId is null
                            Collection repeatAddress = null;
                            try {
                                repeatAddress = campContactHome.findByCampaignIdContactPersonNULL((Integer) paramDTO.get("companyId"),
                                        new Integer(paramDTO.get("campaignId").toString()),
                                        new Integer(addressId.toString()));
                            } catch (FinderException e) {
                                log.debug(" ... can't campContact only without contactPerson ...");
                            }
                            if (repeatAddress.size() > 0) {
                                isDouble = true;
                            }
                        }

                        if (!isDouble && includePartner) {
/*this control is for check not dupplicate contact,contactPerson
  beacuse can't create duplicates, will be unique.
 */
                            if (!campaign.getIsDouble().booleanValue() && contactPersonId != null && !CampaignConstants.EMPTY.equals(contactPersonId)) {
                                try {
                                    campContacts = campContactHome.findByCampaignIdUNIQUEContactPersonId(campaign.getCompanyId(), campaign.getCampaignId(), new Integer(contactPersonId.toString()));
                                } catch (FinderException e) {
                                    log.debug(" ...  campContact with contactPersonId not exist  ... ");
                                }
                                if (campContacts.size() > 0) {
                                    contactPersonDuplicate = true;
                                }
                            }

                            if (!contactPersonDuplicate) {
                                CampaignContactDTO dto = new CampaignContactDTO();
                                dto.put("addressId", addressId.toString());

                                if (map.get("contactPersonId") != null && !"".equals(map.get("contactPersonId"))) {
                                    dto.put("contactPersonId", contactPersonId.toString());
                                } else {
                                    dto.put("contactPersonId", null);
                                }
                                dto.put("campaignId", paramDTO.get("campaignId"));
                                dto.put("companyId", paramDTO.get("companyId"));
                                dto.put("status", new Integer(0));
                                try {
                                    campaignContact = campContactHome.create(dto);
                                } catch (CreateException e) {
                                    log.debug(" ... can't create campContact ... ");
                                }
                            }
                        }
                    }// for end
                }
            }//campaignCriterions =[]
        }
        campaign.setNumberContacts(campaign.getCampaignContact().size());
        resultDTO.setForward("Delete");
    }

    public boolean isStateful() {
        return false;
    }

    /**
     * This method execute every criteria each by one. So the criterion hits are updated with the respective hits.
     *
     * @param criterions    the campaign criterions
     * @param listStructure the Fantabulous main list structure
     * @throws Exception if something goes wrong the exception will be throw
     */
    @SuppressWarnings({"unchecked"})
    private void updateCampaignCriterionHits(Collection<CampaignCriterion> criterions, ListStructure listStructure) {
        ArrayList parameterList = new ArrayList();
        parameterList.add(new SearchParameter("companyId", paramDTO.get("companyId").toString()));
        parameterList.add(new SearchParameter("userId", paramDTO.get("userId").toString()));
        ArrayList singleCriterion;
        CampaignCriterionExecute criteriaExecutor;
        for (CampaignCriterion criterion : criterions) {
            criteriaExecutor = new CampaignCriterionExecute();
            singleCriterion = new ArrayList();
            singleCriterion.add(criterion);
            try {
                criterion.setNumberHits(criteriaExecutor.executeCriterias(listStructure, singleCriterion, parameterList, false,
                        (ListStructure) paramDTO.get("productCategoriesGreatQuery"),
                        (ListStructure) paramDTO.get("customerCategoriesGreatQuery"),
                        (ListStructure) paramDTO.get("addressCategoriesGreatQuery"),
                        (ListStructure) paramDTO.get("contactPersonCategoriesGreatQuery"),
                        (ListStructure) paramDTO.get("salePositionCategoriesGreatQuery")).size());
            } catch (FinderException e) {
                criterion.setNumberHits(0);
            }
        }
    }

    private List<Map> postProcessRecipientList(List<Map> recipients, Integer hasEmail, Integer hasEmailTelecomType, SessionContext ctx) {
        if (isWithHasHasNotEmailCriteria(hasEmail)) {
            recipients = hasHasNotEmailRecipientsProcess(recipients, hasEmail, hasEmailTelecomType, ctx);
        }

        return recipients;
    }

    private List<Map> hasHasNotEmailRecipientsProcess(List<Map> recipients, Integer hasHasNotEmail, Integer hasEmailTelecomType, SessionContext ctx) {
        List<Map> newRecipients = new ArrayList<Map>();

        String op = null;
        if (CampaignConstants.HasHasNotEmailCriteria.HASEMAIL.equal(hasHasNotEmail)) {
            op = "isRecipientWithEmail";
        }
        if (CampaignConstants.HasHasNotEmailCriteria.HASNOTEMAIL.equal(hasHasNotEmail)) {
            op = "isRecipientWithoutEmail";
        }

        if (op != null && hasEmailTelecomType != null) {
            for (Map recipientMap : recipients) {

                ActivityRecipientWithoutEmailReadCmd withoutEmailCmd = new ActivityRecipientWithoutEmailReadCmd();
                withoutEmailCmd.setOp(op);
                withoutEmailCmd.putParam("telecomTypeId", hasEmailTelecomType);
                withoutEmailCmd.putParam("addressId", recipientMap.get("addressId"));
                withoutEmailCmd.putParam("contactPersonId", recipientMap.get("contactPersonId"));

                withoutEmailCmd.executeInStateless(ctx);
                ResultDTO myResultDTO = withoutEmailCmd.getResultDTO();
                if (!myResultDTO.isFailure()) {
                    Boolean isValidRecipient = (Boolean) myResultDTO.get("isValidRecipient");
                    if (isValidRecipient) {
                        newRecipients.add(recipientMap);
                    }
                }
            }
        } else {
            newRecipients = recipients;
        }

        return newRecipients;
    }

    private boolean isWithHasHasNotEmailCriteria(Integer hasHasNotEmail) {
        return (hasHasNotEmail != null &&
                (CampaignConstants.HasHasNotEmailCriteria.HASEMAIL.equal(hasHasNotEmail) || CampaignConstants.HasHasNotEmailCriteria.HASNOTEMAIL.equal(hasHasNotEmail)));
    }

}