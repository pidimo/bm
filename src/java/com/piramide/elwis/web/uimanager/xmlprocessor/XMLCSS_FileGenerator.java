package com.piramide.elwis.web.uimanager.xmlprocessor;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 * This class Generates the CSS file over the data of the XML file
 *
 * @author Alvaro
 * @version $Id: XMLCSS_FileGenerator.java 9703 2009-09-12 15:46:08Z fernando $
 */
public class XMLCSS_FileGenerator {
    private static Log log = LogFactory.getLog(XMLCSS_FileGenerator.class);

    /**
     * This method generates the CSS file
     *
     * @param data The data of the XML file of styles
     */
    public XMLCSS_FileGenerator(ArrayList data) {
        HashMap fileInfo = (HashMap) data.get(0);
        Object type = fileInfo.get("type");
        Object fileName = fileInfo.get("name");

        if (type != null && type.toString().equals("file") && fileName != null && fileName.toString().length() > 0) {
            data.remove(0);
            generateCSS(data, fileName.toString());
        } else {
            log.debug("Filename not defined in XMLCSS_FileGenerator constructor");
        }
    }

    /**
     * This method generates the CSS file
     *
     * @param data     The data of the XML file of styles
     * @param filename The name of the file were to save the CSS information genereated
     */
    public void generateCSS(ArrayList data, String filename) {
        DataOutputStream fs;
        try {
            fs = new DataOutputStream(new FileOutputStream(filename));
            fs.writeBytes("/*File generated by XMLCSS_FileGenerator.java.....*/\n");

            Iterator i = data.iterator();
            while (i.hasNext()) {
                HashMap hm_i = new HashMap();
                hm_i = (HashMap) i.next();
                String type = hm_i.get("type") != null ? hm_i.get("type").toString() : "";
                Object styleClass_i = hm_i.get("class");
                if (type.equals("element") && (styleClass_i != null && styleClass_i.toString().length() > 0)) {
                    fs.writeBytes(styleClass_i + "{\n");
                    ArrayList attributtes = new ArrayList();
                    attributtes = (ArrayList) hm_i.get("data");
                    Iterator j = attributtes.iterator();
                    while (j.hasNext()) {
                        HashMap hm_j = (HashMap) j.next();
                        String name = hm_j.get("name").toString();
                        Object value = hm_j.get("value");
                        Object url = hm_j.get("url");
                        Object arguments = hm_j.get("arguments");
                        fs.writeBytes("\t" + name + ": ");
                        if (value != null && value.toString().length() > 0) {
                            fs.writeBytes(value.toString());
                        }
                        if (url != null && url.toString().length() > 0) {
                            fs.writeBytes(" url(" + url + ")");
                        }
                        if (arguments != null && arguments.toString().length() > 0) {
                            //fs.writeBytes(" "+arguments);
                            if (name.toLowerCase().equals("font-family"))//If font-family write "," before the arguments
                            {
                                fs.writeBytes(", " + arguments);
                            } else {
                                fs.writeBytes(" " + arguments);
                            }
                        }
                        fs.writeBytes(";\n");
                    }
                    fs.writeBytes("}\n");
                } else if (type.equals("section_open")) {
                    fs.writeBytes("/* Section " + hm_i.get("name") + " */\n");
                } else if (type.equals("section_close")) {
                    fs.writeBytes("/* Section end */\n");
                }
            }
            System.out.println("Generated file..." + new File(filename).getAbsolutePath());
        }
        catch (IOException ioe) {
            log.debug("ERROR in create the file for te CSS: " + filename);
        }
    }
}